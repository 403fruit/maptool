/*
 * This software Copyright by the RPTools.net development team, and
 * licensed under the Affero GPL Version 3 or, at your option, any later
 * version.
 *
 * MapTool Source Code is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public
 * License * along with this source Code.  If not, please visit
 * <http://www.gnu.org/licenses/> and specifically the Affero license
 * text at <http://www.gnu.org/licenses/agpl.html>.
 */
package net.rptools.maptool.client.ui.token;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.TexturePaint;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.geom.AffineTransform;
import java.awt.geom.Area;
import java.awt.geom.PathIterator;
import java.awt.image.BufferedImage;
import javax.swing.JPanel;
import net.rptools.lib.swing.SwingUtil;
import net.rptools.maptool.client.AppStyle;
import net.rptools.maptool.client.MapTool;
import net.rptools.maptool.client.ui.zone.vbl.TokenVBL.JTS_SimplifyMethod;
import net.rptools.maptool.model.Token;
import net.rptools.maptool.model.Token.TokenShape;
import net.rptools.maptool.model.Zone;
import net.rptools.maptool.util.ImageManager;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class TokenVblPanel extends JPanel {

  private static final Logger log = LogManager.getLogger();

  private Token token;
  private Area tokenVBL_optimized;
  private Area tokenVBL_original;
  private boolean hideTokenImage = false;
  private boolean inverseVbl = false;
  private boolean autoGenerated = false;
  private Color vblIgnoredColor = new Color(0, 0, 0, 0);
  private int alphaSensitivity = 1;
  private int jtsDistanceTolerance = 10;
  private JTS_SimplifyMethod jtsMethod = JTS_SimplifyMethod.getDefault();
  private int tokenVblOriginalPointCount = 0;
  private int tokenVblOptimizedPointCount = 0;

  private double scale = 1;
  private int startX, startY;
  private int translateX, translateY;
  private int deltaX, deltaY;

  public TokenVblPanel() {
    addMouseWheelListener(
        e -> {
          double delta = e.getWheelRotation() > 0 ? -.25 : .25;
          scale += delta;
          scale = Math.max(1, scale);
          scale = Math.min(100, scale);

          repaint();
        });

    addMouseListener(
        new MouseAdapter() {
          String old;

          @Override
          public void mousePressed(MouseEvent e) {
            startX = e.getX();
            startY = e.getY();
          }

          @Override
          public void mouseReleased(MouseEvent e) {
            translateX += deltaX;
            translateY += deltaY;
            deltaX = 0;
            deltaY = 0;
          }

          @Override
          public void mouseEntered(MouseEvent e) {
            old = MapTool.getFrame().getStatusMessage();
            MapTool.getFrame()
                .setStatusMessage("Mouse Wheel to zoom; double-LClick to reset  position and zoom");
          }

          @Override
          public void mouseExited(MouseEvent e) {
            if (old != null) {
              MapTool.getFrame().setStatusMessage(old);
            }
          }

          @Override
          public void mouseClicked(MouseEvent e) {}
        });

    addMouseMotionListener(
        new MouseMotionAdapter() {
          @Override
          public void mouseDragged(MouseEvent e) {
            deltaX = startX - e.getX();
            deltaY = startY - e.getY();

            repaint();
          }
        });
  }

  public double getScale() {
    return scale;
  }

  public void setScale(double scale) {
    this.scale = scale;
  }

  public int getAnchorX() {
    return token.getAnchor().x;
  }

  public int getAnchorY() {
    return token.getAnchor().y;
  }

  public Token getToken() {
    return token;
  }

  public void setToken(Token token) {
    this.token = new Token(token);
    setTokenVBL_optimized(token.getVBL());
    if (token.getAlphaSensitivity() >= 0) {
      alphaSensitivity = token.getAlphaSensitivity();
    }
  }

  public Area getTokenVBL_optimized() {
    return tokenVBL_optimized;
  }

  public void setTokenVBL_optimized(Area tokenVBL_optimized) {
    this.tokenVBL_optimized = tokenVBL_optimized;

    if (tokenVBL_optimized != null) {
      tokenVblOptimizedPointCount = 0;
      for (PathIterator pi = tokenVBL_optimized.getPathIterator(null); !pi.isDone(); pi.next()) {
        tokenVblOptimizedPointCount++;
      }
    }
  }

  public Area getTokenVBL_original() {
    return tokenVBL_original;
  }

  public void setTokenVBL_original(Area tokenVBL_original) {
    this.tokenVBL_original = tokenVBL_original;

    if (tokenVBL_original != null) {
      tokenVblOriginalPointCount = 0;
      for (PathIterator pi = tokenVBL_original.getPathIterator(null); !pi.isDone(); pi.next()) {
        tokenVblOriginalPointCount++;
      }
    }
  }

  public boolean isHideTokenImage() {
    return hideTokenImage;
  }

  public void setHideTokenImage(boolean hideTokenImage) {
    this.hideTokenImage = hideTokenImage;
  }

  public boolean isInverseVbl() {
    return inverseVbl;
  }

  public void setInverseVbl(boolean inverseVbl) {
    this.inverseVbl = inverseVbl;
  }

  public boolean getAutoGenerated() {
    return autoGenerated;
  }

  public void setAutoGenerated(boolean autoGenerated) {
    this.autoGenerated = autoGenerated;
  }

  public int getAlphaSensitivity() {
    return alphaSensitivity;
  }

  public void setAlphaSensitivity(int value) {
    alphaSensitivity = value;
  }

  public Color getVblIgnoredColor() {
    return vblIgnoredColor;
  }

  public void setVblIgnoredColor(Color color) {
    vblIgnoredColor = color;
  }

  public int getJtsDistanceTolerance() {
    return jtsDistanceTolerance;
  }

  public void setJtsDistanceTolerance(int value) {
    jtsDistanceTolerance = value;
  }

  public JTS_SimplifyMethod getJtsMethod() {
    return jtsMethod;
  }

  public void setJtsMethod(String method) {
    jtsMethod = JTS_SimplifyMethod.fromString(method);
  }

  @Override
  protected void paintComponent(Graphics g) {
    Dimension panelSize = getSize();
    Dimension panelUsableSize =
        new Dimension(
            (int) Math.round(panelSize.width - 10), (int) Math.round(panelSize.height - 10));

    Zone zone = MapTool.getFrame().getCurrentZoneRenderer().getZone();

    // Gather info
    BufferedImage image = ImageManager.getImage(token.getImageAssetId());
    java.awt.Rectangle tokenSize = token.getBounds(zone);
    Dimension originalImgSize = new Dimension(image.getWidth(), image.getHeight());
    Dimension imgSize = new Dimension(image.getWidth(), image.getHeight());

    // If figure we need to calculate an additional offset for the token height
    double iso_ho = 0;
    if (token.getShape() == TokenShape.FIGURE) {
      double th = token.getHeight() * Double.valueOf(tokenSize.width) / token.getWidth();
      iso_ho = tokenSize.height - th;
      tokenSize =
          new java.awt.Rectangle(
              tokenSize.x, tokenSize.y - (int) iso_ho, tokenSize.width, (int) th);
    }

    SwingUtil.constrainTo(imgSize, panelUsableSize.width, panelUsableSize.height);
    Point centerPoint = new Point(panelSize.width / 2, panelSize.height / 2);
    Graphics2D g2d = (Graphics2D) g;

    // Background
    ((Graphics2D) g)
        .setPaint(
            new TexturePaint(
                AppStyle.squaresTexture,
                new java.awt.Rectangle(
                    0,
                    0,
                    AppStyle.squaresTexture.getWidth() * 2,
                    AppStyle.squaresTexture.getHeight() * 2)));
    g2d.fillRect(0, 0, panelSize.width, panelSize.height);
    AppStyle.shadowBorder.paintWithin((Graphics2D) g, 0, 0, panelSize.width, panelSize.height);

    final int x =
        (int)
            (centerPoint.x
                - deltaX
                - translateX
                - (imgSize.width / 2 + token.getAnchor().x) * scale);
    final int y =
        (int)
            (centerPoint.y
                - deltaY
                - translateY
                - (imgSize.height / 2 + token.getAnchor().y) * scale);

    if (!isHideTokenImage()) {
      final int height = (int) (imgSize.height * scale);
      final int width = (int) (imgSize.width * scale);
      g2d.drawImage(image, x, y, width, height, this);
    }

    // Draw the VBL
    if (tokenVBL_optimized != null) {
      //      double tx = centerPoint.x - deltaX - translateX - (imgSize.width / 2) * scale;
      //      double ty = centerPoint.y - deltaY - translateY - (imgSize.height / 2) * scale;
      double sx = (imgSize.getWidth() / originalImgSize.getWidth()) * scale;
      double sy = (imgSize.getHeight() / originalImgSize.getHeight()) * scale;

      AffineTransform atArea = AffineTransform.getTranslateInstance(x, y);
      atArea.concatenate(AffineTransform.getScaleInstance(sx, sy));

      if (isHideTokenImage()) {
        Color color =
            new Color(
                AppStyle.tokenTopologyColor.getRed(),
                AppStyle.tokenTopologyColor.getGreen(),
                AppStyle.tokenTopologyColor.getBlue(),
                200);

        g2d.setColor(color);
      } else {
        g2d.setColor(AppStyle.tokenTopologyColor.brighter());
      }
      g2d.fill(atArea.createTransformedShape(tokenVBL_optimized));
    }

    // Draw the number of points generated
    if (tokenVblOptimizedPointCount > 0) {
      String originalDrawText = "Original Point Count: ";
      String optimizedDrawText = "Optimized Point Count: ";

      Font font = new Font("Serif", Font.BOLD, 16);
      g2d.setFont(font);
      g2d.setColor(Color.blue);
      FontMetrics fontMetrics = g2d.getFontMetrics();
      int w1 = fontMetrics.stringWidth(originalDrawText);
      int w2 = fontMetrics.stringWidth(optimizedDrawText);
      int w3 = fontMetrics.stringWidth("10,000");
      g2d.drawString(originalDrawText + tokenVblOriginalPointCount, panelSize.width - w1 - w3, 20);
      g2d.drawString(
          optimizedDrawText + tokenVblOptimizedPointCount, panelSize.width - w2 - w3, 40);
    }
  }
}
